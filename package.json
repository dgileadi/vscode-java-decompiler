{
    "name": "java-decompiler",
    "displayName": "Java Decompiler",
    "description": "Adds a decompiler for the Java Language Support extension.",
    "author": "David Gileadi",
    "icon": "icon.png",
    "version": "0.0.3",
    "license": "EPL-2.0",
    "publisher": "dgileadi",
    "engines": {
        "vscode": "^1.5.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "repository": {
        "type": "git",
        "url": "https://github.com/dgileadi/vscode-java-decompiler"
    },
    "contributes": {
        "javaExtensions": [
            "./server/dg.jdt.ls.decompiler.common-0.0.3.jar",
            "./server/dg.jdt.ls.decompiler.cfr-0.0.3.jar",
            "./server/dg.jdt.ls.decompiler.fernflower-0.0.3.jar",
            "./server/dg.jdt.ls.decompiler.procyon-0.0.3.jar"
        ],
        "configuration": {
            "type": "object",
            "title": "Java decompiler configuration",
            "properties": {
                "java.decompiler.fernflower": {
                    "type": "object",
                    "description": "Fernflower configuration",
                    "properties": {
                        "rbr": {
                            "type": "boolean",
                            "default": true,
                            "description": "hide bridge methods"
                        },
                        "rsy": {
                            "type": "boolean",
                            "default": true,
                            "description": "hide synthetic class members"
                        },
                        "din": {
                            "type": "boolean",
                            "default": true,
                            "description": "decompile inner classes"
                        },
                        "dc4": {
                            "type": "boolean",
                            "default": true,
                            "description": "collapse 1.4 class references"
                        },
                        "das": {
                            "type": "boolean",
                            "default": true,
                            "description": "decompile assertions"
                        },
                        "hes": {
                            "type": "boolean",
                            "default": true,
                            "description": "hide empty super invocation"
                        },
                        "hdc": {
                            "type": "boolean",
                            "default": true,
                            "description": "hide empty default constructor"
                        },
                        "dgs": {
                            "type": "boolean",
                            "default": true,
                            "description": "decompile generic signatures"
                        },
                        "ner": {
                            "type": "boolean",
                            "default": true,
                            "description": "assume return not throwing exceptions"
                        },
                        "esm": {
                            "type": "boolean",
                            "default": true,
                            "description": "search for 'synchronized' ranges w/o monitorexit instruction (as generated by Kotlin and Scala)"
                        },
                        "den": {
                            "type": "boolean",
                            "default": true,
                            "description": "decompile enumerations"
                        },
                        "rgn": {
                            "type": "boolean",
                            "default": true,
                            "description": "remove getClass() invocation, when it is part of a qualified new statement"
                        },
                        "lit": {
                            "type": "boolean",
                            "default": false,
                            "description": "output numeric literals \"as-is\""
                        },
                        "asc": {
                            "type": "boolean",
                            "default": true,
                            "description": "encode non-ASCII characters in string and character literals as Unicode escapes"
                        },
                        "bto": {
                            "type": "boolean",
                            "default": true,
                            "description": "interpret int 1 as boolean true (workaround to a compiler bug)"
                        },
                        "nns": {
                            "type": "boolean",
                            "default": true,
                            "description": "allow for not set synthetic attribute (workaround to a compiler bug)"
                        },
                        "uto": {
                            "type": "boolean",
                            "default": true,
                            "description": "consider nameless types as java.lang.Object (workaround to a compiler architecture flaw)"
                        },
                        "udv": {
                            "type": "boolean",
                            "default": true,
                            "description": "reconstruct variable names from debug information, if present"
                        },
                        "ump": {
                            "type": "boolean",
                            "default": true,
                            "description": "reconstruct method parameters"
                        },
                        "rer": {
                            "type": "boolean",
                            "default": true,
                            "description": "remove empty exception ranges"
                        },
                        "fdi": {
                            "type": "boolean",
                            "default": true,
                            "description": "de-inline finally structures"
                        },
                        "mpm": {
                            "type": "integer",
                            "default": 0,
                            "description": "maximum allowed processing time per decompiled method, in seconds. 0 means no upper limit"
                        },
                        "ren": {
                            "type": "boolean",
                            "default": false,
                            "description": "rename ambiguous (resp. obfuscated) classes and class elements"
                        },
                        "urc": {
                            "type": "string",
                            "description": "full name of user-supplied class implementing IIdentifierRenamer. It is used to determine which class identifiers should be renamed and provides new identifier names (see \"Renaming identifiers\")"
                        },
                        "inn": {
                            "type": "boolean",
                            "default": true,
                            "description": "check for IntelliJ IDEA-specific @NotNull annotation and remove inserted code if found"
                        },
                        "lac": {
                            "type": "boolean",
                            "default": false,
                            "description": "decompile lambda expressions to anonymous classes"
                        },
                        "nls": {
                            "type": "boolean",
                            "default": false,
                            "description": "define new line character to be used for output. 0 - '\r\n' (Windows), 1 - '\n' (Unix), default is OS-dependent"
                        },
                        "ind": {
                            "type": "string",
                            "description": "indentation string (default is 3 spaces)"
                        },
                        "bsm": {
                            "type": "boolean",
                            "default": false,
                            "description": "map bytecode offsets to source lines"
                        },
                        "iib": {
                            "type": "boolean",
                            "default": false,
                            "description": "continue decompiling in the presence of invalid bytecode"
                        },
                        "vac": {
                            "type": "boolean",
                            "default": false,
                            "description": "decode anonymous classes as local classes if they're detected to not actually be anonymous"
                        },
                        "log": {
                            "type": "string",
                            "default": "INFO",
                            "enum": [
                                "TRACE",
                                "INFO",
                                "WARN",
                                "ERROR"
                            ],
                            "description": "a logging level, possible values are TRACE, INFO, WARN, ERROR"
                        },
                        "ban": {
                            "type": "string",
                            "default": "",
                            "description": "a banner to prepend to decompiled classes"
                        }
                    }
                },
                "java.decompiler.cfr": {
                    "type": "object",
                    "description": "CFR configuration",
                    "properties": {
                        "stringbuffer": {
                            "type": "boolean",
                            "default": false,
                            "description": "Convert new StringBuffer().append.append.append to string + string + string - see https://benf.org/other/cfr/stringbuilder-vs-concatenation.html. Default value only applies from JAVA_5."
                        },
                        "stringbuilder": {
                            "type": "boolean",
                            "default": true,
                            "description": "Convert new StringBuilder().append.append.append to string + string + string - see https://benf.org/other/cfr/stringbuilder-vs-concatenation.html. Default value only applies from JAVA_5."
                        },
                        "stringconcat": {
                            "type": "boolean",
                            "default": true,
                            "description": "Convert usages of StringConcatFactor to string + string + string - see https://benf.org/other/cfr/java9stringconcat.html. Default value only applies from JAVA_9."
                        },
                        "decodeenumswitch": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar switch on enum - see https://benf.org/other/cfr/switch-on-enum.html. Default value only applies from JAVA_5."
                        },
                        "sugarenums": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar enums - see https://benf.org/other/cfr/how-are-enums-implemented.html. Default value only applies from JAVA_5."
                        },
                        "decodestringswitch": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar switch on String - see https://benf.org/other/cfr/java7switchonstring.html. Default value only applies from JAVA_7."
                        },
                        "previewfeatures": {
                            "type": "boolean",
                            "default": true,
                            "description": "Decompile preview features if class was compiled with 'javac --enable-preview'"
                        },
                        "sealed": {
                            "type": "boolean",
                            "description": "Decompile 'sealed' constructs. Defaults to true from Java 18 on, and also on Java 16 and 17 if previewfeatures is true."
                        },
                        "switchexpression": {
                            "type": "boolean",
                            "description": "Re-sugar switch expression. Defaults to true from Java 14 on, and also on Java 12 and 13 if previewfeatures is true."
                        },
                        "recordtypes": {
                            "type": "boolean",
                            "description": "Re-sugar record types.  Defaults to true from Java 16 on, and also on Java 14 and 15 if previewfeatures is true."
                        },
                        "instanceofpattern": {
                            "type": "boolean",
                            "description": "Re-sugar instanceof pattern matches.  Defaults to true from Java 16 on, and also on Java 14 and 15 if previewfeatures is true."
                        },
                        "arrayiter": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar array based iteration. Default value only applies from JAVA_5."
                        },
                        "collectioniter": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar collection based iteration. Default value only applies from JAVA_5."
                        },
                        "tryresources": {
                            "type": "boolean",
                            "default": true,
                            "description": "Reconstruct try-with-resources. Default value only applies from JAVA_7."
                        },
                        "decodelambdas": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-build lambda functions. Default value only applies from JAVA_8."
                        },
                        "innerclasses": {
                            "type": "boolean",
                            "default": true,
                            "description": "Decompile inner classes"
                        },
                        "forbidmethodscopedclasses": {
                            "type": "boolean",
                            "default": false,
                            "description": "Don't allow method scoped classes.   Note - this will NOT be used as a fallback, it must be specified.\nIt will produce odd code."
                        },
                        "forbidanonymousclasses": {
                            "type": "boolean",
                            "default": false,
                            "description": "Don't allow anonymous classes.   Note - this will NOT be used as a fallback, it must be specified.\nIt will produce odd code."
                        },
                        "skipbatchinnerclasses": {
                            "type": "boolean",
                            "default": true,
                            "description": "When processing many files, skip inner classes, as they will be processed as part of outer classes anyway.  If false, you will see inner classes as separate entities also."
                        },
                        "hideutf": {
                            "type": "boolean",
                            "default": true,
                            "description": "Hide UTF8 characters - quote them instead of showing the raw characters"
                        },
                        "hidelongstrings": {
                            "type": "boolean",
                            "default": false,
                            "description": "Hide very long strings - useful if obfuscators have placed fake code in strings"
                        },
                        "removeboilerplate": {
                            "type": "boolean",
                            "default": true,
                            "description": "Remove boilderplate functions - constructor boilerplate, lambda deserialisation etc."
                        },
                        "removeinnerclasssynthetics": {
                            "type": "boolean",
                            "default": true,
                            "description": "Remove (where possible) implicit outer class references in inner classes"
                        },
                        "relinkconst": {
                            "type": "boolean",
                            "default": true,
                            "description": "Relink constants - if there is an inlined reference to a field, attempt to de-inline."
                        },
                        "relinkconststring": {
                            "type": "boolean",
                            "default": true,
                            "description": "Relink constant strings - if there is a local reference to a string which matches a static final, use the static final. If unspecified defaults to the value of relinkconst."
                        },
                        "liftconstructorinit": {
                            "type": "boolean",
                            "default": true,
                            "description": "Lift initialisation code common to all constructors into member initialisation"
                        },
                        "removedeadmethods": {
                            "type": "boolean",
                            "default": true,
                            "description": "Remove pointless methods - default constructor etc."
                        },
                        "removebadgenerics": {
                            "type": "boolean",
                            "default": true,
                            "description": "Hide generics where we've obviously got it wrong, and fallback to non-generic"
                        },
                        "sugarasserts": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar assert calls"
                        },
                        "sugarboxing": {
                            "type": "boolean",
                            "default": true,
                            "description": "Where possible, remove pointless boxing wrappers"
                        },
                        "sugarretrolambda": {
                            "type": "boolean",
                            "default": false,
                            "description": "Where possible, resugar uses of retro lambda"
                        },
                        "showversion": {
                            "type": "boolean",
                            "default": true,
                            "description": "Show used CFR version in header (handy to turn off when regression testing)"
                        },
                        "decodefinally": {
                            "type": "boolean",
                            "default": true,
                            "description": "Re-sugar finally statements"
                        },
                        "tidymonitors": {
                            "type": "boolean",
                            "default": true,
                            "description": "Remove support code for monitors - e.g. catch blocks just to exit a monitor"
                        },
                        "commentmonitors": {
                            "type": "boolean",
                            "default": false,
                            "description": "Replace monitors with comments - useful if we're completely confused"
                        },
                        "lenient": {
                            "type": "boolean",
                            "default": false,
                            "description": "Be a bit more lenient in situations where we'd normally throw an exception"
                        },
                        "dumpclasspath": {
                            "type": "boolean",
                            "default": false,
                            "description": "Dump class path for debugging purposes"
                        },
                        "comments": {
                            "type": "boolean",
                            "default": true,
                            "description": "Output comments describing decompiler status, fallback flags etc."
                        },
                        "forcetopsort": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Force basic block sorting.  Usually not necessary for code emitted directly from javac, but required in the case of obfuscation (or dex2jar!).  Will be enabled in recovery."
                        },
                        "forceclassfilever": {
                            "type": "string",
                            "enum": [
                                "1.0",
                                "1.2",
                                "1.3",
                                "1.4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9",
                                "10",
                                "11",
                                "12",
                                "12",
                                "13",
                                "14",
                                "14",
                                "15",
                                "16",
                                "16",
                                "17",
                                "17",
                                "18",
                                "18"
                            ],
                            "default": null,
                            "description": "Force the version of the classfile (and hence java) that classfiles are decompiled as.  Normally detected from class files.  --help forceclassfilever for details."
                        },
                        "forloopaggcapture": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Allow for loops to aggressively roll mutations into update section, even if they don't appear to be involved with the predicate"
                        },
                        "forcetopsortaggress": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Force extra aggressive topsort options"
                        },
                        "forcetopsortnopull": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Force topsort not to pull try blocks"
                        },
                        "forcecondpropagate": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Pull results of deterministic jumps back through some constant assignments"
                        },
                        "reducecondscope": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Reduce the scope of conditionals, possibly generating more anonymous blocks"
                        },
                        "forcereturningifs": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Move return up to jump site"
                        },
                        "ignoreexceptionsalways": {
                            "type": "boolean",
                            "default": false,
                            "description": "Drop exception information (WARNING : changes semantics, dangerous!)"
                        },
                        "antiobf": {
                            "type": "boolean",
                            "default": false,
                            "description": "Undo various obfuscations"
                        },
                        "obfcontrol": {
                            "type": "boolean",
                            "default": false,
                            "description": "Undo control flow obfuscation, if unspecified then defaults to the value of antiobf"
                        },
                        "obfattr": {
                            "type": "boolean",
                            "default": false,
                            "description": "Undo attribute obfuscation, if unspecified then defaults to the value of antiobf"
                        },
                        "constobf": {
                            "type": "boolean",
                            "default": false,
                            "description": "Undo constant obfuscation, if unspecified then defaults to the value of antiobf"
                        },
                        "hidebridgemethods": {
                            "type": "boolean",
                            "default": true,
                            "description": "Hide bridge methods, if unspecified then defaults to the negation of obfattr"
                        },
                        "ignoreexceptions": {
                            "type": "boolean",
                            "default": false,
                            "description": "Drop exception information if completely stuck (WARNING : changes semantics, dangerous!)"
                        },
                        "forceexceptionprune": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Remove nested exception handlers if they don't change semantics"
                        },
                        "aexagg": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Try to extend and merge exceptions more aggressively"
                        },
                        "aexagg2": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Try to extend and merge exceptions more aggressively (may change semantics)"
                        },
                        "recovertypeclash": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Split lifetimes where analysis caused type clash"
                        },
                        "recovertypehints": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Recover type hints for iterators from first pass"
                        },
                        "silent": {
                            "type": "boolean",
                            "default": false,
                            "description": "Don't display state while decompiling"
                        },
                        "recover": {
                            "type": "boolean",
                            "default": true,
                            "description": "Allow more and more aggressive options to be set if decompilation fails"
                        },
                        "eclipse": {
                            "type": "boolean",
                            "default": true,
                            "description": "Enable transformations to handle Eclipse code better"
                        },
                        "override": {
                            "type": "boolean",
                            "default": true,
                            "description": "Generate @Override annotations (if method is seen to implement interface method, or override a base class method) Default value only applies from JAVA_6."
                        },
                        "showinferrable": {
                            "type": "boolean",
                            "default": false,
                            "description": "Decorate methods with explicit types if not implied by arguments. Default value only applies from JAVA_7."
                        },
                        "help": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "Show help for a given parameter"
                        },
                        "allowcorrecting": {
                            "type": "boolean",
                            "default": true,
                            "description": "Allow transformations which correct errors, potentially at the cost of altering emitted code behaviour.  An example would be removing impossible (in java!) exception handling - if this has any effect, a warning will be emitted."
                        },
                        "labelledblocks": {
                            "type": "boolean",
                            "default": true,
                            "description": "Allow code to be emitted which uses labelled blocks, (handling odd forward gotos)"
                        },
                        "j14classobj": {
                            "type": "boolean",
                            "default": false,
                            "description": "Reverse java 1.4 class object construction. Default value only applies from JAVA_5."
                        },
                        "hidelangimports": {
                            "type": "boolean",
                            "default": true,
                            "description": "Hide imports from java.lang."
                        },
                        "recpass": {
                            "type": "integer",
                            "default": 0,
                            "description": "Decompile specifically with recovery options from pass #X. (really only useful for debugging)"
                        },
                        "analyseas": {
                            "type": "string",
                            "enum": [
                                "DETECT",
                                "JAR",
                                "WAR",
                                "CLASS"
                            ],
                            "default": null,
                            "description": "Force file to be analysed as 'jar' or 'class'"
                        },
                        "jarfilter": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "Substring regex - analyse only classes where the fqn matches this pattern. (when analysing jar)"
                        },
                        "rename": {
                            "type": "boolean",
                            "default": false,
                            "description": "Synonym for 'renamedupmembers' + 'renameillegalidents' + 'renameenumidents'"
                        },
                        "renamedupmembers": {
                            "type": "boolean",
                            "default": false,
                            "description": "Rename ambiguous/duplicate fields.  Note - this WILL break reflection based access, so is not automatically enabled. If unspecified then defaults to the value of rename."
                        },
                        "renamesmallmembers": {
                            "type": "integer",
                            "default": 0,
                            "description": "Rename small members.  Note - this WILL break reflection based access, so is not automatically enabled."
                        },
                        "renameillegalidents": {
                            "type": "boolean",
                            "default": false,
                            "description": "Rename identifiers which are not valid java identifiers.  Note - this WILL break reflection based access, so is not automatically enabled. If unspecified then defaults to the value of rename."
                        },
                        "renameenumidents": {
                            "type": "boolean",
                            "default": false,
                            "description": "Rename ENUM identifiers which do not match their 'expected' string names.  Note - this WILL break reflection based access, so is not automatically enabled. If unspecified then defaults to the value of rename."
                        },
                        "removedeadconditionals": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Remove code that can't be executed."
                        },
                        "aggressivedoextension": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Fold impossible jumps into do loops with 'first' test"
                        },
                        "aggressiveduff": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Fold duff device style switches with additional control."
                        },
                        "aggressivedocopy": {
                            "type": "integer",
                            "default": 0,
                            "description": "Clone code from impossible jumps into loops with 'first' test"
                        },
                        "aggressivesizethreshold": {
                            "type": "integer",
                            "default": 13000,
                            "description": "Opcode count at which to trigger aggressive reductions"
                        },
                        "staticinitreturn": {
                            "type": "boolean",
                            "default": true,
                            "description": "Try to remove return from static init"
                        },
                        "usenametable": {
                            "type": "boolean",
                            "default": true,
                            "description": "Use local variable name table if present"
                        },
                        "methodname": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "Name of method to analyse"
                        },
                        "extraclasspath": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "additional class path - classes in this classpath will be used if needed."
                        },
                        "pullcodecase": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pull code into case statements agressively"
                        },
                        "allowmalformedswitch": {
                            "type": [
                                "boolean",
                                "null"
                            ],
                            "default": null,
                            "description": "Allow potentially malformed switch statements"
                        },
                        "elidescala": {
                            "type": "boolean",
                            "default": false,
                            "description": "Elide things which aren't helpful in scala output (serialVersionUID, @ScalaSignature)"
                        },
                        "usesignatures": {
                            "type": "boolean",
                            "default": true,
                            "description": "Use signatures in addition to descriptors (when they are not obviously incorrect)"
                        },
                        "caseinsensitivefs": {
                            "type": "boolean",
                            "description": "Cope with case insensitive file systems by renaming colliding classes. Defaults to the system's case-insensitivity."
                        },
                        "lomem": {
                            "type": "boolean",
                            "default": false,
                            "description": "Be more agressive about uncaching in order to reduce memory footprint"
                        },
                        "importfilter": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "Substring regex - import classes only when fqn matches this pattern. (VNegate with !, eg !lang)"
                        },
                        "obfuscationpath": {
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "description": "Path to obfuscation symbol remapping file"
                        },
                        "trackbytecodeloc": {
                            "type": "boolean",
                            "default": false,
                            "description": "Propagate bytecode location info."
                        }
                    }
                },
                "java.decompiler.procyon": {
                    "type": "object",
                    "description": "Procyon configuration",
                    "properties": {
                        "mergeVariables": {
                            "type": "boolean",
                            "default": false,
                            "description": "Attempt to merge as many variables as possible.  This may lead to fewer declarations, but at the expense of inlining and useful naming.  This feature is experimental and may be removed or become the standard behavior in future releases."
                        },
                        "forceExplicitImports": {
                            "type": "boolean",
                            "default": false,
                            "description": "Collapse multiple imports from the same package into a single wildcard import."
                        },
                        "forceExplicitTypeArguments": {
                            "type": "boolean",
                            "default": false,
                            "description": "Always print type arguments to generic methods."
                        },
                        "retainRedundantCasts": {
                            "type": "boolean",
                            "default": false,
                            "description": "Do not remove redundant explicit casts."
                        },
                        "flattenSwitchBlocks": {
                            "type": "boolean",
                            "default": false,
                            "description": "Drop the braces statements around switch sections when possible."
                        },
                        "showSyntheticMembers": {
                            "type": "boolean",
                            "default": false,
                            "description": "Show synthetic (compiler-generated) members."
                        },
                        "excludeNestedTypes": {
                            "type": "boolean",
                            "default": false,
                            "description": "Exclude nested types when decompiling their enclosing types."
                        },
                        "showDebugLineNumbers": {
                            "type": "boolean",
                            "default": false,
                            "description": "For debugging, show Java line numbers as inline comments (implies -ln; requires -o)."
                        },
                        "retainPointlessSwitches": {
                            "type": "boolean",
                            "default": false,
                            "description": "Do not lift the contents of switches having only a default label."
                        },
                        "isUnicodeOutputEnabled": {
                            "type": "boolean",
                            "default": false,
                            "description": "Enable Unicode output (printable non-ASCII characters will not be escaped)."
                        },
                        "simplifyMemberReferences": {
                            "type": "boolean",
                            "default": false,
                            "description": "Simplify type-qualified member references in Java output [EXPERIMENTAL]."
                        },
                        "textBlockLineMinimum": {
                            "type": "int",
                            "default": 3,
                            "description": "Specify the minimum number of line breaks before string literals are rendered as text blocksDefault is 3; set to 0 to disable text blocks."
                        },
                        "forcedCompilerTarget": {
                            "type": "string",
                            "enum": [
                                "JDK1_1",
                                "JDK1_2",
                                "JDK1_3",
                                "JDK1_4",
                                "JDK1_5",
                                "JDK1_6",
                                "JDK1_7",
                                "JDK1_8",
                                "JDK9",
                                "JDK10",
                                "JDK11",
                                "JDK12",
                                "JDK13",
                                "JDK14",
                                "JDK15",
                                "JDK16",
                                "JDK17"
                            ],
                            "default": null,
                            "description": "Explicitly specify the language version to decompile for, e.g., 1.7, 1.8, 8, 9, etc. [EXPERIMENTAL, INCOMPLETE]"
                        },
                        "forceFullyQualifiedReferences": {
                            "type": "boolean",
                            "default": false,
                            "description": "Force fully qualified type and member references in Java output."
                        },
                        "disableForEachTransforms": {
                            "type": "boolean",
                            "default": false,
                            "description": "Disable 'for each' loop transforms."
                        }
                    },
                    "default": null
                }
            }
        }
    },
    "extensionDependencies": [
        "redhat.java"
    ]
}